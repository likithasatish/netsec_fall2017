import sysimport asynciofrom playground.network.packet import PacketTypefrom playground.network.packet.fieldtypes import STRING,BUFFER,INT64,BOOLfrom playground.asyncio_lib.testing import TestLoopExfrom playground.network.testing import MockTransportToStorageStreamfrom playground.network.testing import MockTransportToProtocolclass initiateconnection(PacketType):    DEFINITION_IDENTIFIER = "lab.client1.initiateconection"    DEFINITION_VERSION = "1.0"class authenticationmessage(PacketType):    DEFINITION_IDENTIFIER = "lab.server1.authenticationmessage"    DEFINITION_VERSION = "2.0"    FIELDS = [        ("imageID",INT64),        ("pixelSequence",INT64)        ]class requestvalidation(PacketType):    DEFINITION_IDENTIFIER = "lab.client2.requestvalidation"    DEFINITION_VERSION = "3.0"    FIELDS = [            ("imageID",INT64),            ("answer",STRING)            ]class validate(PacketType):    DEFINITION_IDENTIFIER = "lab.server2.validate"    DEFINITION_VERSION = "4.0"    FIELDS = [            ("imageID",INT64),            ("boo",BOOL)            ]packet1 = initiateconnection()packet2 = authenticationmessage()packet3 = requestvalidation()packet4 = validate()packet2.imageID = 7packet2.pixelSequence = 100111111001packet3.imageID = 7packet3.answer = "H"packet4.imageID = 7packet1s = packet1.__serialize__()packet2s = packet2.__serialize__()packet3s = packet3.__serialize__()class EchoClientProtocol(asyncio.Protocol):	def __init__(self):		self.transport= None	def connection_made(self,transport):		self.transport = transport		self._deserializer = PacketType.Deserializer()		self.transport.write(packet1s)	def data_received(self,data):		self._deserializer.update(data)		for packet in self._deserializer.nextPackets():			if isinstance(packet,authenticationmessage):				print("Client : Recaptcha Image Received from Server")				print("Image Pixel Sequence : ") 				print(packet.pixelSequence)				self.transport.write(packet3s)							elif isinstance(packet,validate):				print("Client : Answer validated by Server")				print("Validate")				print(packet.boo)				def connection_lost(self,exc):		self.transport= None		class EchoServerProtocol(asyncio.Protocol):	def __init__(self):		self.transport= None	def connection_made(self,transport):		self.transport = transport		self._deserializer = PacketType.Deserializer()	def data_received(self,data):		self._deserializer.update(data)		for packet in self._deserializer.nextPackets():			if isinstance(packet,initiateconnection):				print ("Server : Connection Initiated by Client")				self.transport.write(packet2s)				elif isinstance(packet,requestvalidation):				print ("Server : Validation requested")				print ("Answer") 				print(packet.answer)				if (packet.answer == "H"):					packet4.boo = True				else:					packet4.boo = False				packet4s = packet4.__serialize__()				self.transport.write(packet4s)						def connection_lost(self,exc):		self.transport = Nonedef unittest():	asyncio.set_event_loop(TestLoopEx())		client = EchoClientProtocol()	server = EchoServerProtocol()	transportToServer = MockTransportToProtocol(server)	transportToClient = MockTransportToProtocol(client)	server.connection_made(transportToClient)	client.connection_made(transportToServer)		if __name__ == "__main__":	unittest()